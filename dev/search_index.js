var documenterSearchIndex = {"docs":
[{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"EditURL = \"https://github.com/dionysos-dev/Dionysos.jl/blob/master/docs/src/examples/gol_lazar_belta.jl\"","category":"page"},{"location":"generated/gol_lazar_belta/#Example:-Gol,-Lazar-and-Belta-(2013)","page":"gollazarbelta","title":"Example: Gol, Lazar and Belta (2013)","text":"","category":"section"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"(Image: Binder) (Image: nbviewer)","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"This example was borrowed from [1, Example VIII.A] and tackles an optimal control for the hybrid system with state evolution governed by","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"<img src=\"https://latex.codecogs.com/svg.latex?x(k&plus;1)&space;=&space;\\begin{bmatrix}&space;1&space;&&space;1&space;\\&space;0&space;&&space;1&space;\\end{bmatrix}x(k)&space;&plus;&space;\\begin{bmatrix}&space;0.5&space;\\&space;1.0&space;\\end{bmatrix}&space;u(k)\" title=\"x(k+1) = \\begin{bmatrix} 1 & 1 \\ 0 & 1 \\end{bmatrix}x(k) + \\begin{bmatrix} 0.5 \\ 1.0 \\end{bmatrix} u(k)\" />","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"The goal is to take the state vector toward a target set XT by visiting one of the squares A or B and avoiding the obstacles O1 and O2","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"First, let us import CDDLib, GLPK, OSQP, JuMP, Pavito and Ipopt","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"import CDDLib\nimport GLPK\nimport OSQP\nusing JuMP\nimport Pavito\nimport Cbc\nimport Ipopt","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"At this point we import Dionysos","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"using Dionysos","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"And the file defining the hybrid system for this problem","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"include(joinpath(dirname(dirname(pathof(Dionysos))), \"examples\", \"gol_lazar_belta.jl\"))","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"Now we instantiate our system using the function provided by gollazarbelta.jl","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"system = gol_lazar_belta(CDDLib.Library());\nnothing #hide","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"Then, we define initial conditions (continuous and discrete states) to this system and set N as the search depth, i.e., the number of allowed time steps.","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"x0 = [1.0, -6.0];\nq0 = 3;\n\nN = 11;\nnothing #hide","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"We instantiate our Optimal Control Problem by defining the state and transition costs. Notice that Comment that state_cost is defined to be zero for each mode/discrete state of the system and the transition_cost is defined to be u_1^2 which is defined by the quadratic form u' * Q * u with Q = ones(1, 1).","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"state_cost = Fill(ZeroFunction(), nmodes(system))\ntransition_cost = QuadraticControlFunction(ones(1, 1))\n\nproblem = OptimalControlProblem(\n    system,\n    q0, x0,\n    Fill(state_cost, N),\n    Fill(Fill(transition_cost, ntransitions(system)), N),\n    system.ext[:q_T],\n    N\n);\nnothing #hide","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"Finally, we select the method presented in [2] as our optimizer","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"qp_solver = optimizer_with_attributes(\n    OSQP.Optimizer,\n    \"eps_abs\" => 1e-8,\n    \"eps_rel\" => 1e-8,\n    \"max_iter\" => 100000,\n    MOI.Silent() => true\n);\n\nmip_solver = optimizer_with_attributes(\n    Cbc.Optimizer,\n    MOI.Silent() => true\n);\n\ncont_solver = optimizer_with_attributes(\n    Ipopt.Optimizer,\n    MOI.Silent() => true\n);\n\nmiqp_solver = optimizer_with_attributes(\n    Pavito.Optimizer,\n    \"mip_solver\" => mip_solver,\n    \"cont_solver\" => cont_solver,\n    MOI.Silent() => true\n);\n\n\nalgo = optimizer_with_attributes(BemporadMorari.Optimizer,\n    \"continuous_solver\" => qp_solver,\n    \"mixed_integer_solver\" => miqp_solver,\n    \"indicator\" => false,\n    \"log_level\" => 0\n);\nnothing #hide","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"and use it to solve the given problem, with the help of the abstraction layer MathOptInterface provided by JuMP","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"optimizer = MOI.instantiate(algo)\nMOI.set(optimizer, MOI.RawParameter(\"problem\"), problem)\n@time MOI.optimize!(optimizer)","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"We check the termination status","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"termination = MOI.get(optimizer, MOI.TerminationStatus())","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"the objective value","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"objective_value = MOI.get(optimizer, MOI.ObjectiveValue())","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"and recover the corresponding continuous trajectory","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"xu = MOI.get(optimizer, ContinuousTrajectoryAttribute());\nnothing #hide","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"A little bit of data visualization now:","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"using Plots\nusing Colors\n\n##Auxiliary function for annotating\nfunction text_in_set_plot!(pl, po, t; kws...)\n    ##solve finding center (other solvers? https://jump.dev/JuMP.jl/dev/installation/#Supported-solvers)\n    solver = optimizer_with_attributes(GLPK.Optimizer, \"presolve\" => GLPK.ON)\n    plot!(pl, po; kws...)\n    if t !== nothing\n        c, r = hchebyshevcenter(hrep(po), solver, verbose=0)\n        annotate!(pl, [(c..., text(t, 12))])\n    end\nend\n\n##Initialize our canvas\np = Plots.plot(fmt = :png, fillcolor = :white)\n\n##Show the discrete modes\nfor mode in states(system)\n    t = (system.ext[:q_T] in [mode, mode + 11]) ? \"XT\" : (mode == system.ext[:q_A] ? \"A\" : (mode == system.ext[:q_B] ? \"B\" :\n            mode <= 11 ? string(mode) : string(mode - 11)))\n    text_in_set_plot!(p, stateset(system, mode), t, fillcolor = :white, linecolor = :black)\nend\n\n##Plot obstacles\nfor i in eachindex(system.ext[:obstacles])\n    text_in_set_plot!(p, system.ext[:obstacles][i], \"O$i\", fillcolor = :black, fillalpha = 0.1)\nend\n\n\n##Initial state\nscatter!(p, [x0[1]], [x0[2]])\nannotate!(p, [(x0[1], x0[2] - 0.5, text(\"x0\", 10))])\n\n##Split the vector into x1 and x2\nx1 = [xu.x[j][1] for j in eachindex(xu.x)]\nx2 = [xu.x[j][2] for j in eachindex(xu.x)]\n\n##Plot the trajectory\nscatter!(p, x1, x2)","category":"page"},{"location":"generated/gol_lazar_belta/#References","page":"gollazarbelta","title":"References","text":"","category":"section"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"<a id=\"1\">[1]</a> Gol, E. A., Lazar, M., & Belta, C. (2013). Language-guided controller synthesis for linear systems. IEEE Transactions on Automatic Control, 59(5), 1163-1176.","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"<a id=\"2\">[2]</a> Bemporad, A., & Morari, M. (1999). Control of systems integrating logic, dynamics, and constraints. Automatica, 35(3), 407-427.","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"","category":"page"},{"location":"generated/gol_lazar_belta/","page":"gollazarbelta","title":"gollazarbelta","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#Dionysos","page":"Index","title":"Dionysos","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"Dionysos implements a solver for the optimal control of cyber-physical systems.","category":"page"}]
}
